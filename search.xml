<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[博客迁移]]></title>
    <url>%2F2018%2F12%2F07%2Fswitch-blog%2F</url>
    <content type="text"><![CDATA[前言在去年大一下的web课程写的静态网站”heheql.online”，因为域名到期，一直拖到现在才决定迁移到github.io上。 说是自己写的，也不过是看到漂亮的博客，查看源码，复制css，东拼西凑拼成的博客。 当时是挂在免费的主机屋解析的，但是免费的东西果然不是长久的。貌似在几个月前开始收费了。 因为是静态网页，顺便也挂在七牛云上，自动生成了一个七牛云的三级域名，但是现在七牛云也变成临时的三级域名一个月之后就无效了。 时隔一年，还记得当时雄心壮志搭好博客、买好域名，决定打算一周写一篇ACM-ICPC题解的。 后面因为一些不(lan)可(de)抗(geng)力(xin)的原因，决定改成不定期更新。 hexo 使用1、先新建一个文件夹作为博客存放在本地的目录 12mkdir blogcd blog 2、目录初始化,同时生成静态网页，可以在本地“localhost:8080”预览 123hexo inithexo ghexo s -p 9090 3、如果发现没有问题，deploy部署到github.io上 1hexo d 结语hexo中可以用的主题很丰富，不用自己写主题真是太省心了！几个小时就能简单实现一个静态网站。后续也会把之前的文章慢慢迁移过来！]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CCF 图论题]]></title>
    <url>%2F2018%2F06%2F05%2Fccf_graph%2F</url>
    <content type="text"><![CDATA[csp201609-4 交通规划题意：求点1到其他点的最短路第一眼看上去是求最小生成树，但其实是求点1到其他点的最短路只需要利用cost[]数组记录最短路上边的权值即可但是对一个点v来说存在多条最短路的时候，cost[v]保存到v的边的最小的权值12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;string&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;vector&gt;#include &lt;set&gt;#include &lt;iomanip&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;stack&gt;#include &lt;ctime&gt;using namespace std;#define REP(i,a,b) for(int i = (a); i &lt; (b); i++)#define MS(a,b) memset(a,b,sizeof(a))#define swap(a,b) a^=b^=a^=btypedef pair&lt;int,int&gt; P;typedef long long LL;const int INF = 0x3f3f3f3f;const int MAXN = 1e4 + 10;const LL modd = 1e6;int n, m, dis[MAXN], cost[MAXN];vector&lt;P&gt; G[MAXN];void spfa(int src)&#123; MS(dis,INF); MS(cost,INF); priority_queue&lt;P,vector&lt;P&gt;,greater&lt;P&gt; &gt; que; dis[src] = 0; que.push(P(dis[src],src)); while(!que.empty())&#123; P t = que.top(); que.pop(); int u = t.second, d = t.first; if(dis[u] &lt; d)continue; REP(i,0,G[u].size())&#123; int v = G[u][i].first, w = G[u][i].second; if(dis[v] &gt; d + w)&#123; cost[v] = w; dis[v] = d + w; que.push(P(dis[v],v)); &#125;else if(dis[v] == d + w)&#123; cost[v] = min(cost[v],w); que.push(P(dis[v],v)); &#125; &#125; &#125; return ;&#125;int main() &#123;#ifndef ONLINE_JUDGE freopen("in","r",stdin); freopen("out","w",stdout);#endif ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int a, b, c; cin &gt;&gt; n &gt;&gt; m; REP(i,0,m)&#123; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; G[a].push_back(P(b,c)); G[b].push_back(P(a,c)); &#125; spfa(1); LL ans = 0; REP(i,2,n+1) ans += cost[i]; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; csp201604-4 游戏题意：求（1，1) 到 （n，m） 的最短路只需要利用bfs来搜索权值为1的最短路但要利用vis[x][y][t]来记录点（x,y）在时间t是否可以访问 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;bits/stdc++.h&gt;using namespace std;#define REP(i,a,b) for(int i = (a); i &lt; (b); i++)#define MS(a,b) memset(a,b,sizeof(a))#define swap(a,b) a^=b^=a^=b#define ls (rt&lt;&lt;1)#define rs (rt&lt;&lt;1|1)#define mid ((l+r)&gt;&gt;1)#define READ3(a,b,c) scanf("%d%d%d",&amp;a,&amp;b,&amp;c)#define READ4(a,b,c,d) scanf("%d%d%d%d",&amp;a,&amp;b,&amp;c,&amp;d)#define lson l,mid,ls#define rson (mid+1),r,rstypedef pair&lt;int,int&gt; P;typedef long long LL;const int INF = 0x3f3f3f3f;const int MAXN = 1e2 + 10;const long double PI = acos(-1.0);const LL modd = 1e6;int n, m, t, dir[][2] = &#123;0,1,-1,0,1,0,0,-1&#125;;int G[MAXN][MAXN];bool vis[MAXN][MAXN][500];int bfs(int ex, int ey)&#123; queue&lt;P&gt; que; que.push(P(0,1*1000+1)); vis[1][1][0] = true; while(!que.empty())&#123; P t = que.front(); que.pop(); int x = t.second/1000, y = t.second%1000, step = t.first; // if(vis[x][y][step]) continue; vis[x][y][step] = true; if(x == ex &amp;&amp; y == ey) return step; REP(i,0,4)&#123; int xx = x + dir[i][0], yy = y + dir[i][1], nextstep = step + 1; int s = G[xx][yy]/1000, e = G[xx][yy]%1000; if(xx &lt; 1 || yy &lt; 1 || xx &gt; n || yy &gt; m || G[xx][yy] != 0 &amp;&amp; nextstep &gt;= s &amp;&amp; nextstep &lt;= e || vis[xx][yy][nextstep]) continue; que.push(P(nextstep,xx*1000+yy)); vis[xx][yy][nextstep] = true; &#125; &#125;&#125;int main() &#123;#ifndef ONLINE_JUDGE freopen("in.txt","r",stdin); freopen("out.txt","w",stdout);#endif ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); MS(G,0); MS(vis,0); cin &gt;&gt; n &gt;&gt; m &gt;&gt; t; int a, b, s, e; REP(i,0,t)&#123; cin &gt;&gt; a &gt;&gt; b &gt;&gt; s &gt;&gt; e; G[a][b] = s*1000+e; &#125; cout &lt;&lt; bfs(n,m) &lt;&lt; endl; return 0;&#125; csp201512-4 送货题意：求从点1出发到点n的欧拉路只需要记录每个点的入度、出度，来判断是否存在以点1为起点的欧拉路如果存在欧拉路输出路径，否则输出-1输出路径，不要用dfs，用栈来模拟dfs,否则会爆栈 无向图 一个无向图 G 存在欧拉路径当且仅当无向图 G 是连通图， 且该图中有两个奇度顶点（度数为奇数） 或者无奇度顶点。 当无向图 G 是包含两个奇度顶点的连通图时， G 的欧拉路径必定以这两个奇度顶点为端点。 一个无向图 G 存在欧拉回路当且仅当无向图 G 连通且不存在奇度顶点。有向图 一个有向图 G 存在欧拉路径当且仅当 G 是连通的有向图， 且满足以下两个条件之一：所有顶点的入度和出度相等；有一个顶点的出度与入度之差为 1 ， 一个顶点的出度与入度之差为 -1 ， 其余顶点的入度和出度相等。 当有向图 G 包含两个入度和出度不相同的顶点且有欧拉路径时， 欧拉路径必定以这两个入度出度不相同的顶点为端点。 一个有向图 G 存在欧拉回路当且仅当图 G 是连通的有向图， 且所有顶点的入度和出度相等。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;string&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;vector&gt;#include &lt;set&gt;#include &lt;iomanip&gt;#include &lt;cmath&gt;#include &lt;stack&gt;using namespace std;#define REP(i,a,b) for(int i = (a); i &lt; (b); i++)#define MS(a,b) memset(a,b,sizeof(a))#define READ(a) scanf("%d",&amp;a)#define READ2(a,b) scanf("%d%d",&amp;a,&amp;b)#define READ3(a,b,c) scanf("%d%d%d",&amp;a,&amp;b,&amp;c)typedef pair&lt;int,int&gt; P;typedef long long LL;const int MAXN = 1e4 + 10;const int MAXL = 1e3 + 10;bool vis[MAXN][MAXN];int n, m, f[MAXN], siz[MAXN];void init()&#123;MS(vis,0);REP(i,0,MAXN)f[i] = i, siz[i] = 1;&#125;int find(int x)&#123;return f[x] == x? x: f[x] = find(f[x]);&#125;void merge(int a, int b)&#123; a=find(a);b=find(b);if(a!=b)&#123;f[a]=b;siz[b]+=siz[a];&#125;&#125;set&lt;int&gt; G[MAXN];stack&lt;int&gt; stk;void dfs(int u)&#123; stack&lt;int&gt; d; d.push(u); while(!d.empty())&#123; int u = d.top(); bool ok = false; for(set&lt;int&gt;::iterator it = G[u].begin(); it != G[u].end(); it++)&#123; int v = *it; if(vis[u][v]) continue; vis[u][v] = vis[v][u] = true; d.push(v); ok = true; break; &#125; if(!ok) &#123; d.pop(); stk.push(u); &#125; &#125;&#125;int main() &#123;#ifndef ONLINE_JUDGE freopen("in","r",stdin); freopen("out","w",stdout);#endif ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); init(); bool ok = false; cin &gt;&gt; n &gt;&gt; m; int a, b; REP(i,0,m)&#123; cin &gt;&gt; a &gt;&gt; b; G[a].insert(b); G[b].insert(a); merge(a,b); &#125; if(siz[find(a)] == n)&#123; int num = 0; REP(i,1,n+1) if(int(G[i].size())%2 != 0)num++; if(num == 2 &amp;&amp; int(G[1].size())%2 != 0 || num == 0) &#123; ok = true; dfs(1); cout &lt;&lt; 1; stk.pop(); while(!stk.empty()) &#123; cout &lt;&lt; ' ' &lt;&lt; stk.top(); stk.pop(); &#125; cout &lt;&lt; endl; &#125; &#125; if(!ok) cout &lt;&lt; -1 &lt;&lt; endl; return 0;&#125; csp201509-4 高速公路题意：给图G&lt;V,E&gt; 求其中两点双向可达的点队数先利用tarjan求出强联通分量的个数scc,每个强联通分量中包含的点的个数siz[]一个强连通分量v中，任意两点都互相可达，两点双向可达的点队数为 siz[v]*siz[v]/2对每个强连通分量中的两点可达的点队数求和即可 [Code] losing代码丢了，放个模板12345678910111213141516171819void tarjan(int u,int fa) &#123; int cnt = 0;//统计u的孩子个数 low[u] = dfn[u] = ++idx; for(int i = 0; i &lt; G[u].size(); i++)&#123; int v = G[u][i]; if(v == fa) continue; if(!dfn[v])&#123; tarjan(v,u); ++cnt; low[u] = min(low[u],low[v]); if((root != u &amp;&amp; dfn[u] &lt;= low[v]) || (root == u &amp;&amp; cnt &gt; 1)) //判断是否是割点 isap[u] = 1; if(dfn[u] &lt; low[v]) cutE[++numE]=Edge(u,v);//判断是否是桥,视具体情况采用恰当的结构记录。 &#125; else low[u] = min(low[u],dfn[v]);//这里不用判断是否点v在栈中 &#125; &#125; csp201503-4 网络延时题意：求树上任意两点的距离中最大的距离这道题就是求树的直径，两次bfs即可 树的直径求法：第一次任意选一个点进行dfs(bfs)找到离它最远的点，此点就是最长路的一个端点，再以此点进行dfs（bfs），找到离它最远的点，此点就是最长路的另一个端点，于是就找到了树的直径。 证明：略12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;queue&gt;#include &lt;stack&gt;#define REP(i,a,b) for(int i = (a); i &lt; (b); i++)#define MS(a,b) memset(a,b,sizeof(a))using namespace std;typedef long long LL;typedef pair&lt;int,LL&gt; P;const int MAXN = 2e4 + 10;const int INF = 0x3f3f3f3f;vector&lt;int&gt; G[MAXN];bool vis[MAXN];int n, m;LL bfs(int &amp;src)&#123; MS(vis,0); LL ret = 0; vis[src] = true; queue&lt;P&gt; que; que.push(P(0,src)); while(!que.empty())&#123; P t = que.front(); que.pop(); int u = t.second; LL step = t.first; ret = step; src = u; REP(i,0,G[u].size())&#123; int v = G[u][i]; if(!vis[v]) &#123; vis[v] = true; que.push(P(step+1,v)); &#125; &#125; &#125; return ret;&#125;int main() &#123;#ifndef ONLINE_JUDGE freopen("in", "r", stdin); freopen("out", "w", stdout);#endif int t; cin &gt;&gt; n &gt;&gt; m; REP(i, 2, n + 1) &#123; cin &gt;&gt; t; G[t].push_back(i); G[i].push_back(t); &#125; REP(i, 1, m + 1) &#123; cin &gt;&gt; t; G[t].push_back(i + n); G[i + n].push_back(t); &#125; int src = 1; bfs(src); cout &lt;&lt; bfs(src) &lt;&lt; endl; return 0;&#125; csp201412-4 最优灌溉题意：求最小生成树最小生成树摸板题利用kruskal求即可12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;#define REP(i,a,b) for(int i = (a); i &lt; (b); ++i)#define MS(a,b) memset(a,b,sizeof(a))typedef long long LL;typedef pair&lt;int,int&gt; P;const int MAXN = 2e3 + 10;const int MAXM = 1e5 + 10;const int INF = 0x3f3f3f3f;class edge&#123;public: int u, v, cost; bool operator &lt; (const edge &amp;b)const&#123; return cost &lt; b.cost; &#125;&#125;;int n, m, f[MAXN];edge dat[MAXM];void init()&#123;REP(i,0,MAXN)f[i] = i;&#125;int find(int x)&#123;return f[x] == x? x: f[x]=find(f[x]);&#125;void merge(int a, int b)&#123; a=find(a),b=find(b);if(a != b)f[a] = b;&#125;LL kru()&#123; init(); LL ret = 0; for(int i = 0, res = n; i &lt; m &amp;&amp; res &gt; 1; i++)&#123; int u = dat[i].u, v = dat[i].v, cost = dat[i].cost; if(find(u) != find(v))&#123; merge(u,v); ret += (LL)cost; &#125; &#125; return ret;&#125;int main()&#123;#ifdef QLOCAL freopen("in.txt","r",stdin); freopen("out.txt","w",stdout);#endif ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; n &gt;&gt; m; REP(i,0,m) cin &gt;&gt; dat[i].u &gt;&gt; dat[i].v &gt;&gt; dat[i].cost; sort(dat,dat+m); cout &lt;&lt; kru() &lt;&lt; endl; return 0;&#125; csp201403-4 无线网络题意： 求点1到点n的最少经过的点先把n个坐标点中，两点距离小于r的点连边，转换成图G&lt;V,E&gt;再把点权下方的边权，即dis[n]-1 d代表到 1-n中经过的点的数量123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;string&gt;#include &lt;queue&gt;#include &lt;map&gt;#include &lt;vector&gt;#include &lt;set&gt;#include &lt;iomanip&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;stack&gt;#include &lt;ctime&gt;using namespace std;#define REP(i,a,b) for(int i = (a); i &lt; (b); i++)#define MS(a,b) memset(a,b,sizeof(a))#define READ2(a,b) scanf("%d%d",&amp;a,&amp;b)#define READ3(a,b,c) scanf("%d%d%d",&amp;a,&amp;b,&amp;c)typedef pair&lt;int,int&gt; P;typedef long long LL;const int MAXN = 1e3 + 10;const int INF = 0x3f3f3f3f;const int MAXL = 1e3 + 10;P dat[MAXN];int n, m, k, r, dis[MAXN];vector&lt;int&gt; G[MAXN];class node&#123;public: int first,second,cnt; node(int a, int b, int c):first(a),second(b),cnt(c)&#123;&#125; bool operator &lt; (const node &amp;b)const&#123; return first &gt; b.first; &#125;&#125;;void spfa(int src)&#123; MS(dis,INF); priority_queue&lt;node&gt; que; dis[src] = 0; que.push(node(0,src,0)); while(!que.empty())&#123; node t = que.top();que.pop(); int u = t.second, d = t.first, cnt = t.cnt; if(dis[u] &lt; d)continue; REP(i,0,G[u].size())&#123; int v = G[u][i], w = 1; if(dis[v] &gt; d + w &amp;&amp; cnt + (v &gt;= n) &lt;= k)&#123; dis[v] = d + w; que.push(node(dis[v],v,cnt+(v&gt;=n))); &#125; &#125; &#125;&#125;inline LL getDis(P a, P b)&#123; return (LL)(a.first-b.first)*(a.first-b.first)+(LL)(a.second-b.second)*(a.second-b.second);&#125;int main() &#123;#ifndef ONLINE_JUDGE freopen("in.txt","r",stdin); freopen("out.txt","w",stdout);#endif ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; r; int cnt = n + m; REP(i,0,n) cin &gt;&gt; dat[i].first &gt;&gt; dat[i].second; REP(i,n,cnt) cin &gt;&gt; dat[i].first &gt;&gt; dat[i].second; REP(i,0,cnt) REP(j,i+1,cnt) if(getDis(dat[i],dat[j]) &lt;= (LL)r*r)&#123; G[i+1].push_back(j+1); G[j+1].push_back(i+1); &#125; spfa(1); cout &lt;&lt; dis[2] - 1 &lt;&lt;endl; return 0;&#125; 祝大家CCF-CSP考个好成绩！]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>CCF-CSP</tag>
        <tag>图论</tag>
      </tags>
  </entry>
</search>
