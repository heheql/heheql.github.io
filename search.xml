<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>博客迁移</title>
      <link href="/2018/12/07/switch-blog/"/>
      <url>/2018/12/07/switch-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在去年大一下的web课程写的静态网站”heheql.online”，因为域名到期，一直拖到现在才决定迁移到github.io上。  </p><p>说是自己写的，也不过是看到漂亮的博客，查看源码，复制css，东拼西凑拼成的博客。  </p><p>当时是挂在免费的主机屋解析的，但是免费的东西果然不是长久的。貌似在几个月前开始收费了。  </p><p>因为是静态网页，顺便也挂在七牛云上，自动生成了一个七牛云的三级域名，但是现在七牛云也变成临时的三级域名一个月之后就无效了。  </p><p>时隔一年，还记得当时雄心壮志搭好博客、买好域名，决定打算一周写一篇ACM-ICPC题解的。  </p><p>后面因为一些不(lan)可(de)抗(geng)力(xin)的原因，决定改成不定期更新。  </p><h2 id="hexo-使用"><a href="#hexo-使用" class="headerlink" title="hexo 使用"></a>hexo 使用</h2><p>1、先新建一个文件夹作为博客存放在本地的目录</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><p>2、目录初始化,同时生成静态网页，可以在本地“localhost:8080”预览</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">hexo g</span><br><span class="line">hexo s -<span class="selector-tag">p</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure><p>3、如果发现没有问题，deploy部署到github.io上</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>hexo中可以用的主题很丰富，不用自己写主题真是太省心了！<br>几个小时就能简单实现一个静态网站。<br>后续也会把之前的文章慢慢迁移过来！</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CCF 图论题</title>
      <link href="/2018/06/05/ccf_graph/"/>
      <url>/2018/06/05/ccf_graph/</url>
      
        <content type="html"><![CDATA[<h2 id="csp201609-4-交通规划"><a href="#csp201609-4-交通规划" class="headerlink" title="csp201609-4 交通规划"></a>csp201609-4 交通规划</h2><h3 id="题意：求点1到其他点的最短路"><a href="#题意：求点1到其他点的最短路" class="headerlink" title="题意：求点1到其他点的最短路"></a>题意：求点1到其他点的最短路</h3><p>第一眼看上去是求最小生成树，但其实是求点1到其他点的最短路<br>只需要利用cost[]数组记录最短路上边的权值即可<br>但是对一个点v来说存在多条最短路的时候，cost[v]保存到v的边的最小的权值<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i = (a); i &lt; (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(a,b) a^=b^=a^=b</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> LL modd = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, dis[MAXN], cost[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;P&gt; G[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> src)</span></span>&#123;</span><br><span class="line">MS(dis,INF);</span><br><span class="line">MS(cost,INF);</span><br><span class="line">priority_queue&lt;P,<span class="built_in">vector</span>&lt;P&gt;,greater&lt;P&gt; &gt; que;</span><br><span class="line">dis[src] = <span class="number">0</span>;</span><br><span class="line">que.push(P(dis[src],src));</span><br><span class="line"><span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">P t = que.top(); que.pop();</span><br><span class="line"><span class="keyword">int</span> u = t.second, d = t.first;</span><br><span class="line"><span class="keyword">if</span>(dis[u] &lt; d)<span class="keyword">continue</span>;</span><br><span class="line">REP(i,<span class="number">0</span>,G[u].size())&#123;</span><br><span class="line"><span class="keyword">int</span> v = G[u][i].first, w = G[u][i].second;</span><br><span class="line"><span class="keyword">if</span>(dis[v] &gt; d + w)&#123;</span><br><span class="line">cost[v] = w;</span><br><span class="line">dis[v] = d + w;</span><br><span class="line">que.push(P(dis[v],v));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dis[v] == d + w)&#123;</span><br><span class="line">cost[v] = min(cost[v],w);</span><br><span class="line">que.push(P(dis[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">REP(i,<span class="number">0</span>,m)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">G[a].push_back(P(b,c));</span><br><span class="line">G[b].push_back(P(a,c));</span><br><span class="line">&#125;</span><br><span class="line">spfa(<span class="number">1</span>);</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line">REP(i,<span class="number">2</span>,n+<span class="number">1</span>) ans += cost[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="csp201604-4-游戏"><a href="#csp201604-4-游戏" class="headerlink" title="csp201604-4 游戏"></a>csp201604-4 游戏</h2><h3 id="题意：求（1，1-到-（n，m）-的最短路"><a href="#题意：求（1，1-到-（n，m）-的最短路" class="headerlink" title="题意：求（1，1) 到 （n，m） 的最短路"></a>题意：求（1，1) 到 （n，m） 的最短路</h3><p>只需要利用bfs来搜索权值为1的最短路<br>但要利用vis[x][y][t]来记录点（x,y）在时间t是否可以访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i = (a); i &lt; (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(a,b) a^=b^=a^=b</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (rt&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (rt&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ3(a,b,c) scanf(<span class="meta-string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ4(a,b,c,d) scanf(<span class="meta-string">"%d%d%d%d"</span>,&amp;a,&amp;b,&amp;c,&amp;d)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,mid,ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (mid+1),r,rs</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e2</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> LL modd = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, t, dir[][<span class="number">2</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> G[MAXN][MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN][MAXN][<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> ex, <span class="keyword">int</span> ey)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;P&gt; que;</span><br><span class="line">    que.push(P(<span class="number">0</span>,<span class="number">1</span>*<span class="number">1000</span>+<span class="number">1</span>));</span><br><span class="line">    vis[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        P t = que.front(); que.pop();</span><br><span class="line">        <span class="keyword">int</span> x = t.second/<span class="number">1000</span>, y = t.second%<span class="number">1000</span>, step = t.first;</span><br><span class="line">        <span class="comment">// if(vis[x][y][step]) continue; vis[x][y][step] = true;</span></span><br><span class="line">        <span class="keyword">if</span>(x == ex &amp;&amp; y == ey) <span class="keyword">return</span> step;</span><br><span class="line">        REP(i,<span class="number">0</span>,<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> xx = x + dir[i][<span class="number">0</span>], yy = y + dir[i][<span class="number">1</span>], nextstep = step + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> s = G[xx][yy]/<span class="number">1000</span>, e = G[xx][yy]%<span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">if</span>(xx &lt; <span class="number">1</span> || yy &lt; <span class="number">1</span> || xx &gt; n || yy &gt; m || G[xx][yy] != <span class="number">0</span> &amp;&amp; nextstep &gt;= s &amp;&amp; nextstep &lt;= e || vis[xx][yy][nextstep]) <span class="keyword">continue</span>;</span><br><span class="line">            que.push(P(nextstep,xx*<span class="number">1000</span>+yy));</span><br><span class="line">            vis[xx][yy][nextstep] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"out.txt"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    MS(G,<span class="number">0</span>);</span><br><span class="line">    MS(vis,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> a, b, s, e;</span><br><span class="line">    REP(i,<span class="number">0</span>,t)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; s &gt;&gt; e;</span><br><span class="line">        G[a][b] = s*<span class="number">1000</span>+e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; bfs(n,m) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="csp201512-4-送货"><a href="#csp201512-4-送货" class="headerlink" title="csp201512-4 送货"></a>csp201512-4 送货</h2><h3 id="题意：求从点1出发到点n的欧拉路"><a href="#题意：求从点1出发到点n的欧拉路" class="headerlink" title="题意：求从点1出发到点n的欧拉路"></a>题意：求从点1出发到点n的欧拉路</h3><p>只需要记录每个点的入度、出度，来判断是否存在以点1为起点的欧拉路<br>如果存在欧拉路输出路径，否则输出-1<br>输出路径，不要用dfs，用栈来模拟dfs,否则会爆栈</p><h4 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h4><ul><li>一个无向图 G 存在欧拉路径当且仅当无向图 G 是连通图， 且该图中有两个奇度顶点（度数为奇<br>数） 或者无奇度顶点。</li><li>当无向图 G 是包含两个奇度顶点的连通图时， G 的欧拉路径必定以这两个奇度顶点为端点。</li><li>一个无向图 G 存在欧拉回路当且仅当无向图 G 连通且不存在奇度顶点。<h4 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h4></li><li>一个有向图 G 存在欧拉路径当且仅当 G 是连通的有向图， 且满足以下两个条件之一：<br>所有顶点的入度和出度相等；<br>有一个顶点的出度与入度之差为 1 ， 一个顶点的出度与入度之差为 -1 ， 其余顶<br>点的入度和出度相等。</li><li>当有向图 G 包含两个入度和出度不相同的顶点且有欧拉路径时， 欧拉路径必定以这两个入度出<br>度不相同的顶点为端点。</li><li>一个有向图 G 存在欧拉回路当且仅当图 G 是连通的有向图， 且所有顶点的入度和出度相等。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i = (a); i &lt; (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ(a) scanf(<span class="meta-string">"%d"</span>,&amp;a)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ2(a,b) scanf(<span class="meta-string">"%d%d"</span>,&amp;a,&amp;b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ3(a,b,c) scanf(<span class="meta-string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXL = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> n, m, f[MAXN], siz[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;MS(vis,<span class="number">0</span>);REP(i,<span class="number">0</span>,MAXN)f[i] = i, siz[i] = <span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> f[x] == x? x: f[x] = find(f[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123; a=find(a);b=find(b);<span class="keyword">if</span>(a!=b)&#123;f[a]=b;siz[b]+=siz[a];&#125;&#125;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; d;</span><br><span class="line">d.push(u);</span><br><span class="line"><span class="keyword">while</span>(!d.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> u = d.top();</span><br><span class="line"><span class="keyword">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = G[u].begin(); it != G[u].end(); it++)&#123;</span><br><span class="line"><span class="keyword">int</span> v = *it;</span><br><span class="line"><span class="keyword">if</span>(vis[u][v]) <span class="keyword">continue</span>; vis[u][v] = vis[v][u] = <span class="literal">true</span>;</span><br><span class="line">d.push(v);</span><br><span class="line">ok = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ok) &#123;</span><br><span class="line">d.pop();</span><br><span class="line">stk.push(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">REP(i,<span class="number">0</span>,m)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">G[a].insert(b);</span><br><span class="line">G[b].insert(a);</span><br><span class="line">merge(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(siz[find(a)] == n)&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">REP(i,<span class="number">1</span>,n+<span class="number">1</span>)  <span class="keyword">if</span>(<span class="keyword">int</span>(G[i].size())%<span class="number">2</span> != <span class="number">0</span>)num++;</span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">2</span> &amp;&amp; <span class="keyword">int</span>(G[<span class="number">1</span>].size())%<span class="number">2</span> != <span class="number">0</span> || num == <span class="number">0</span>) &#123;</span><br><span class="line">ok = <span class="literal">true</span>;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">stk.pop();</span><br><span class="line"><span class="keyword">while</span>(!stk.empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; stk.top();</span><br><span class="line">stk.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ok) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="csp201509-4-高速公路"><a href="#csp201509-4-高速公路" class="headerlink" title="csp201509-4 高速公路"></a>csp201509-4 高速公路</h2><h3 id="题意：给图G-lt-V-E-gt-求其中两点双向可达的点队数"><a href="#题意：给图G-lt-V-E-gt-求其中两点双向可达的点队数" class="headerlink" title="题意：给图G&lt;V,E&gt; 求其中两点双向可达的点队数"></a>题意：给图G&lt;V,E&gt; 求其中两点双向可达的点队数</h3><p>先利用tarjan求出强联通分量的个数scc,每个强联通分量中包含的点的个数siz[]<br>一个强连通分量v中，任意两点都互相可达，两点双向可达的点队数为 siz[v]*siz[v]/2<br>对每个强连通分量中的两点可达的点队数求和即可</p><p> [Code] losing<br>代码丢了，放个模板<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> tarjan(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)  &#123;  </span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;<span class="comment">//统计u的孩子个数</span></span><br><span class="line">    low[u] = dfn[u] = ++idx;  </span><br><span class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++)&#123;  </span><br><span class="line">        <span class="keyword">int</span> v = G[u][i];  </span><br><span class="line">        <span class="built_in">if</span>(v == fa) <span class="built_in">continue</span>;  </span><br><span class="line">        <span class="built_in">if</span>(!dfn[v])&#123;  </span><br><span class="line">            tarjan(v,u);  </span><br><span class="line">            ++cnt;  </span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u],low[v]);  </span><br><span class="line">            <span class="built_in">if</span>((root != u &amp;&amp; dfn[u] &lt;= low[v]) || (root == u &amp;&amp; cnt &gt; <span class="number">1</span>)) </span><br><span class="line"><span class="comment">//判断是否是割点  </span></span><br><span class="line">                isap[u] = <span class="number">1</span>;  </span><br><span class="line">            <span class="built_in">if</span>(dfn[u] &lt; low[v]) cutE[++numE]=Edge(u,v);</span><br><span class="line"><span class="comment">//判断是否是桥,视具体情况采用恰当的结构记录。  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">else</span> low[u] = <span class="built_in">min</span>(low[u],dfn[v]);<span class="comment">//这里不用判断是否点v在栈中  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="csp201503-4-网络延时"><a href="#csp201503-4-网络延时" class="headerlink" title="csp201503-4 网络延时"></a>csp201503-4 网络延时</h2><h3 id="题意：求树上任意两点的距离中最大的距离"><a href="#题意：求树上任意两点的距离中最大的距离" class="headerlink" title="题意：求树上任意两点的距离中最大的距离"></a>题意：求树上任意两点的距离中最大的距离</h3><p>这道题就是求树的直径，两次bfs即可  </p><h4 id="树的直径求法："><a href="#树的直径求法：" class="headerlink" title="树的直径求法："></a>树的直径求法：</h4><p>第一次任意选一个点进行dfs(bfs)找到离它最远的点，此点就是最长路的一个端点，再以此点进行dfs（bfs），找到离它最远的点，此点就是最长路的另一个端点，于是就找到了树的直径。 </p><h4 id="证明：略"><a href="#证明：略" class="headerlink" title="证明：略"></a>证明：略</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i = (a); i &lt; (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,LL&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function">LL <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> &amp;src)</span></span>&#123;</span><br><span class="line">MS(vis,<span class="number">0</span>);</span><br><span class="line">LL ret = <span class="number">0</span>;</span><br><span class="line">vis[src] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;P&gt; que;</span><br><span class="line">que.push(P(<span class="number">0</span>,src));</span><br><span class="line"><span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">P t = que.front(); que.pop();</span><br><span class="line"><span class="keyword">int</span> u = t.second;</span><br><span class="line">LL step = t.first;</span><br><span class="line">ret = step;</span><br><span class="line">src = u;</span><br><span class="line">REP(i,<span class="number">0</span>,G[u].size())&#123;</span><br><span class="line"><span class="keyword">int</span> v = G[u][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[v]) &#123;</span><br><span class="line">vis[v] = <span class="literal">true</span>;</span><br><span class="line">que.push(P(step+<span class="number">1</span>,v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    REP(i, <span class="number">2</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        G[t].push_back(i);</span><br><span class="line">G[i].push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    REP(i, <span class="number">1</span>, m + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        G[t].push_back(i + n);</span><br><span class="line">G[i + n].push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">int</span> src = <span class="number">1</span>;</span><br><span class="line">bfs(src);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bfs(src) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="csp201412-4-最优灌溉"><a href="#csp201412-4-最优灌溉" class="headerlink" title="csp201412-4    最优灌溉"></a>csp201412-4    最优灌溉</h2><h3 id="题意：求最小生成树"><a href="#题意：求最小生成树" class="headerlink" title="题意：求最小生成树"></a>题意：求最小生成树</h3><p>最小生成树摸板题<br>利用kruskal求即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i = (a); i &lt; (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> u, v, cost;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> cost &lt; b.cost;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m, f[MAXN];</span><br><span class="line">edge dat[MAXM];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;REP(i,<span class="number">0</span>,MAXN)f[i] = i;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> f[x] == x? x: f[x]=find(f[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123; a=find(a),b=find(b);<span class="keyword">if</span>(a != b)f[a] = b;&#125;</span><br><span class="line"><span class="function">LL <span class="title">kru</span><span class="params">()</span></span>&#123;</span><br><span class="line">init();</span><br><span class="line">LL ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, res = n; i &lt; m &amp;&amp; res &gt; <span class="number">1</span>; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u = dat[i].u, v = dat[i].v, cost = dat[i].cost;</span><br><span class="line"><span class="keyword">if</span>(find(u) != find(v))&#123;</span><br><span class="line">merge(u,v);</span><br><span class="line">ret += (LL)cost;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> QLOCAL</span></span><br><span class="line">freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"out.txt"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">REP(i,<span class="number">0</span>,m)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; dat[i].u &gt;&gt; dat[i].v &gt;&gt; dat[i].cost;</span><br><span class="line">sort(dat,dat+m);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; kru() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="csp201403-4-无线网络"><a href="#csp201403-4-无线网络" class="headerlink" title="csp201403-4 无线网络"></a>csp201403-4 无线网络</h2><h3 id="题意：-求点1到点n的最少经过的点"><a href="#题意：-求点1到点n的最少经过的点" class="headerlink" title="题意： 求点1到点n的最少经过的点"></a>题意： 求点1到点n的最少经过的点</h3><p>先把n个坐标点中，两点距离小于r的点连边，转换成图G&lt;V,E&gt;<br>再把点权下方的边权，即dis[n]-1 d代表到 1-n中经过的点的数量<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i = (a); i &lt; (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ2(a,b) scanf(<span class="meta-string">"%d%d"</span>,&amp;a,&amp;b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ3(a,b,c) scanf(<span class="meta-string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c)</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXL = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line">P dat[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, m, k, r, dis[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> first,second,cnt;</span><br><span class="line">node(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c):first(a),second(b),cnt(c)&#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> first &gt; b.first;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> src)</span></span>&#123;</span><br><span class="line">MS(dis,INF);</span><br><span class="line">priority_queue&lt;node&gt; que;</span><br><span class="line">dis[src] = <span class="number">0</span>;</span><br><span class="line">que.push(node(<span class="number">0</span>,src,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">node t = que.top();que.pop();</span><br><span class="line"><span class="keyword">int</span> u = t.second, d = t.first, cnt = t.cnt;</span><br><span class="line"><span class="keyword">if</span>(dis[u] &lt; d)<span class="keyword">continue</span>;</span><br><span class="line">REP(i,<span class="number">0</span>,G[u].size())&#123;</span><br><span class="line"><span class="keyword">int</span> v = G[u][i], w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(dis[v] &gt; d + w &amp;&amp; cnt + (v &gt;= n) &lt;= k)&#123;</span><br><span class="line">dis[v] = d + w;</span><br><span class="line">que.push(node(dis[v],v,cnt+(v&gt;=n)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">getDis</span><span class="params">(P a, P b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (LL)(a.first-b.first)*(a.first-b.first)+(LL)(a.second-b.second)*(a.second-b.second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"out.txt"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; r;</span><br><span class="line"><span class="keyword">int</span> cnt = n + m;</span><br><span class="line">REP(i,<span class="number">0</span>,n) <span class="built_in">cin</span> &gt;&gt; dat[i].first &gt;&gt; dat[i].second;</span><br><span class="line">REP(i,n,cnt) <span class="built_in">cin</span> &gt;&gt; dat[i].first &gt;&gt; dat[i].second;</span><br><span class="line">REP(i,<span class="number">0</span>,cnt)</span><br><span class="line">REP(j,i+<span class="number">1</span>,cnt)</span><br><span class="line"><span class="keyword">if</span>(getDis(dat[i],dat[j]) &lt;= (LL)r*r)&#123;</span><br><span class="line">G[i+<span class="number">1</span>].push_back(j+<span class="number">1</span>);</span><br><span class="line">G[j+<span class="number">1</span>].push_back(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">spfa(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dis[<span class="number">2</span>] - <span class="number">1</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="祝大家CCF-CSP考个好成绩！"><a href="#祝大家CCF-CSP考个好成绩！" class="headerlink" title="祝大家CCF-CSP考个好成绩！"></a>祝大家CCF-CSP考个好成绩！</h1>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CCF-CSP </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
